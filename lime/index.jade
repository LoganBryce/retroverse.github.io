//output: $1.html
head
  title Lime Engine
  meta(charset="utf-8")
  link(rel="stylesheet", href="style.min.css", type="text/css")

body
  h1(id="title") Lime Engine
  div(id="wrapper", class="box")
    div(id="left-column", class="box column")
      h2(class="list-title") Lime Engine
      hr
      a(class="list-option", href="#whats-lime") - What's Lime?
      a(class="list-option", href="#why-use-lime") - Why use Lime?
      a(class="list-option", href="#whats-moonshine") - What's MoonShine?
      a(class="list-option", href="#whats-jungle") - What's a Jungle?
      a(class="list-option", href="#what-species-included") - What Species are Included?
    div(id="right-column", class="box column extend")
      div(id="text-container", class="right-textbox")
        h2(id="whats-lime") What is Lime?
        p Lime is a game engine made with the LÃ–VE2D framework. It is designed to be fast, flexible
          | and easy to use. It is built using a superset of ECS called Jungle and a superset of
          | MoonScript called MoonShine.

        h2(id="why-use-lime") Why use Lime?
        p It is easy to setup thanks to its template system and it includes everything you need
          | to get started without wasting time setting up libraries. It also includes a language
          | designed with speed in mind that helps you turn your ideas into code with less hassle.

        h2(id="whats-moonshine") What's MoonShine?
        p MoonScript is superset of Lua and MoonShine in a superset of MoonScript that aims to add functionality and make the language
          | more familiar for people coming from other languages.

        h2(id="whats-jungle") What's a Jungle?
        p Jungle is a similiar system to an Entity Component System However it has some slight differences,
          | the elements of a jungle are below.
          ul
            li <code>Species</code>
              p Species are like classes of components. They have behaviours and are instantiated to create
                | entities. Most entities are created by a helper function created by the user. An example species is
                | a player.
            li <code>Behaviours</code>
              p Behaviours are functionality and are found on species. They have events which run on entities
                | at certain times, namely <code>Spawn</code>, <code>Update</code> &amp; <code>Draw</code>. An example behaviour
                | is movement.
            li <code>Entities</code>
              p Entities Are runtime instances of species. For example, if a pig is a species, then a single pig in your game is an entity.
            li <code>Operations</code>
              p Operations are methods which are run on all entities that have a particular behaviour. An example operation
                | is a draw call where you want to organise sprites based on their depth.

        h2(id="what-species-included") What Species are Included?
        p Some basic behaviours that are included and are also easily modifiable,
          | many implement the engines libraries.
          ul
            li <code>movement</code>
              p Allows you to control an entity with keyboard, joysticks or controllers.
            li <code>physics</code>
              p Simple drop physics, no gravity implemented but easily extensible.
            li <code>physics-anim</code>
              p Update sprite based on last input and speed.
            li <code>sprite</code>
              p Render an image at a sprites position, required for enitity to have an associated
                | position.
            li <code>sprite-states</code>
              p Allows multiple sprites to be easily switched between. i.e <code>run</code> or <code>idle</code>.
